module S_to_P #( parameter w = 8) 
    (
    input  logic clk,
    input  logic rst_n,
    input  logic serial_in,
    input  logic msb_first,
    output logic [w-1:0] parallel_out,
    output logic data_valid
    );

    logic [w-1:0] shift_reg;
    logic [$clog2(w)-1:0] bit_count;  
    
    
    always @(posedge clk or negedge rst_n ) begin
        if (!rst_n) begin
            bit_count='b000;
            shift_reg <= 8'b00000000;  // Shift_Reg is for saving the result after each clock edge
        end 
        
        else if (msb_first)   begin
            shift_reg <= {shift_reg[7:0], serial_in};  // FOR MSB FIRST
            bit_count++;  // couter update 
        end
        
        
        else begin
            shift_reg <= {serial_in , shift_reg[7:1]};  // FOR LSB FIRST
            bit_count++;
        end
    end
    
   assign data_valid =(bit_count=='b111);
   
   always_comb begin
   case (data_valid) 
   1:   parallel_out = shift_reg; // parallel out is for final result
   endcase
   end
 