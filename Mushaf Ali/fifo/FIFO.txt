`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 07/05/2024 12:31:21 PM
// Design Name: 
// Module Name: fifo
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module fifo # (
//parameter weidth=8,
parameter depth=8
)
(
input logic clk,
input logic reset,
input logic w_en,
input logic r_en,
input logic [7:0]data_in,
output logic [7:0]data_out,
output logic full_fifo,
output logic empty_fifo
);
logic [7:0] mem [0:depth-1];
logic [2:0]wr_ptr;
logic [2:0]rd_ptr;
logic [3:0] count;
assign empty_fifo = (count==0);
assign full_fifo= (count==depth);
always_ff@(posedge clk)begin
if(reset)begin
wr_ptr <=3'b000;
end
else begin
if(w_en==1)begin
mem[wr_ptr] <= data_in;
wr_ptr <= wr_ptr+1;
end
end
end
always_ff@(posedge clk)begin
if(reset)begin
rd_ptr <=0;
end
else begin
if(r_en==1)begin
data_out <= mem[rd_ptr];
rd_ptr <= rd_ptr+1;
end
end
end
always_ff@(posedge clk )begin
case ({wr_ptr,rd_ptr})
2'b10 : count <=count+1;
2'b01 : count <=count-1;
2'b11 : count <= count;
2'b00 : count <=0;
endcase
end
endmodule
