module tb_spi_master;

  // Testbench signals
  logic clk;
  logic rst_n;
  logic start_transaction;
  logic [7:0] tx_data;
  logic [7:0] rx_data;
  logic transaction_done;
  logic sclk;
  logic mosi;
  logic miso;
  logic ss_n;

  // Instantiate the SPI master module
  spi_master uut (
    .clk(clk),
    .rst_n(rst_n),
    .start_transaction(start_transaction),
    .tx_data(tx_data),
    .rx_data(rx_data),
    .transaction_done(transaction_done),
    .sclk(sclk),
    .mosi(mosi),
    .miso(miso),
    .ss_n(ss_n)
  );

  // Clock generation
  initial begin
    clk = 0;
    forever #5 clk = ~clk;  // 100 MHz clock
  end

  // Test sequence
  initial begin
    // Reset the DUT
    rst_n = 0;
    start_transaction = 0;
    tx_data = 8'h00;
    miso = 0;
    #20;
    
    rst_n = 1;
    #10;
    
    // Test Case 1: Send data 0xA5
    tx_data = 8'hA5;
    start_transaction = 1;
    #40;
    start_transaction = 0;
    wait(transaction_done);
    #10;
    end

    // Add more test cases as required
    
    // Finish simulation
   // $stop;

  // MISO data generation
 always @(posedge sclk or negedge rst_n) begin
   if (!rst_n) begin
      miso <= 0;
    end else begin
      case (uut.bit_count)
        3'd0: miso <= 1'b1;
        3'd1: miso <= 1'b0;
        3'd2: miso <= 1'b1;
        3'd3: miso <= 1'b0;
        3'd4: miso <= 1'b1;
        3'd5: miso <= 1'b0;
        3'd6: miso <= 1'b1;
        3'd7: miso <= 1'b0;
      endcase
    end
  end

endmodule
